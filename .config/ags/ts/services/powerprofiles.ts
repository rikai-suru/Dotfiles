import Gio from "gi://Gio";
import Service from "resource:///com/github/Aylur/ags/service.js";
import * as Utils from "resource:///com/github/Aylur/ags/utils.js";

enum PowerProfiles {
    COOLING = "cooling",
    PERFORMANCE = "perfomance",
    POWER_SAVING = "balanced",
    INVALID = "invalid",
}

enum PowerProfilesIcon {
    COOLING = "power-profile-balanced-symbolic",
    PERFORMANCE = "power-profile-performance-symbolic",
    POWER_SAVING = "power-profile-power-saver-symbolic",
    INVALID = "dialog-warning-symbolic",
}

class LenovoPowerProfile extends Service {
    static {
        Service.register(
            this,
            {},
            {
                "mode": ["string", "r"],
                "icon-name": ["string", "r"],
            },
        );
    }

    // file generated by a systemd script installed using ~/.dotfiles/install.sh
    private readonly _file = "/tmp/lenovo_power_mode";
    private _mode: string = PowerProfiles.INVALID;
    private _icon_name: string = PowerProfilesIcon.INVALID;

    get mode(): string { return this._mode; }
    get icon_name(): string { return this._icon_name; }

    constructor() {
        super();

        this.update(Utils.readFile(this._file).trim());
        Utils.monitorFile(this._file, (file, event) => {
            if (event !== Gio.FileMonitorEvent.CHANGED)
                return;

            this.update(Utils.readFile(file).trim());
        });
    }

    private update(mode: string) {
        switch (mode) {
            case "0x0":
                this.updateProperty("mode", PowerProfiles.COOLING);
                this.updateProperty("icon_name", PowerProfilesIcon.COOLING);
                break;

            case "0x1":
                this.updateProperty("mode", PowerProfiles.PERFORMANCE);
                this.updateProperty("icon_name", PowerProfilesIcon.PERFORMANCE);
                break;

            case "0x2":
                this.updateProperty("mode", PowerProfiles.POWER_SAVING);
                this.updateProperty("icon_name", PowerProfilesIcon.POWER_SAVING);
                break;

            default:
                this.updateProperty("mode", PowerProfiles.INVALID);
                this.updateProperty("icon_name", PowerProfilesIcon.INVALID);
                break;
        }

        this.emit("changed");
    }
}

const service = new LenovoPowerProfile;
export default service;
